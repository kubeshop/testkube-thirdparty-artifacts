def version_list():
  """
  Returns a list of Testkube versions pulled to local folder.
  """


  # Prefer explicit TESTKUBE_VERSION env var if provided
  explicit_version = os.getenv('TESTKUBE_VERSION', '')
  if explicit_version:
    return [explicit_version]

  # Otherwise, attempt to infer from ../charts, ignoring empty results
  charts_list = local('ls -A ../charts | tr -d "tke-"', quiet=True)
  inferred_versions = [v for v in str(charts_list).strip().split("\n") if v]
  if inferred_versions:
    return inferred_versions

  # Final fallback to a sane default to avoid invalid namespaces like "testkube-"
  return ["8.0.15"]

def deploy_testkube_instances(version):
  """
  Deploys the Testkube and MongoDB instance using Helm charts into this folder.
  """
  testkube_namespace = """
kind: Namespace
apiVersion: v1
metadata:
  name: testkube-%s
  """ % version.replace(".", "-")
  print("Creating namespace: %s" % testkube_namespace)
  k8s_yaml([blob(testkube_namespace)])
  print("Building MongoDB 8.0.15 Docker image for Testkube version: %s" % version)
  docker_build(
    'testkube/mongodb:8.0.15',
    context='.',
    dockerfile='mongo-8.dockerfile'
  )
  print("Deploying MongoDB 8.0.15 for Testkube version: %s" % version)
  yaml = helm('./helm', name='testkube-enterprise-mongodb', namespace='testkube-%s' % version.replace(".", "-"), values='./mongo.values.yaml')
  k8s_yaml(yaml)
  # print("Deploying Testkube version: %s" % version)
  # yaml = helm('../charts/tke-%s/testkube-enterprise' % version, name='testkube', namespace='testkube-%s' % version.replace(".", "-"), values='./values.demo.yaml')
  # k8s_yaml(yaml)
  # # TODO: this grouping does not work with multiple versions
  # print("Setting up port forwards and resources for Testkube version: %s" % version)
  # k8s_resource(workload='testkube-enterprise-ui', port_forwards=8080, labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-api', port_forwards=8090, labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-dex', port_forwards=5556, labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-minio', port_forwards=9000, labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-mongodb', labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-worker-service', labels='testkube-enterprise')
  # k8s_resource(workload='testkube-enterprise-nats', labels='testkube-enterprise')
  # k8s_resource(workload='testkube-api-server', labels='testkube-agent')
  # k8s_resource(workload='testkube-nats', labels='testkube-agent')
  # print("Deployed Testkube version: %s" % version)

# TODO: find a way to make grouping work with multiple versions or testkube
[deploy_testkube_instances(version) for version in version_list()]
